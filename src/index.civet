yargs from yargs
* as fs from node:fs
from ./codepage.civet import { encode, decode }
compile from ./compile.civet

argv := await yargs process.argv[2...]
    .positional 'filename',
        type: 'string'
        normalize: true
        describe: 'input file'
    .options
        encoding:
            alias: 'e'
            choices: ['utf-8', 'utf-16le', 'sbcs'] as const
            default: 'utf-8' as const
            describe: 'input encoding'
        outfile:
            alias: 'o'
            type: 'string'
            normalize: true
            describe: 'output file'
        encode:
            type: 'boolean'
            describe: 'Instead of compiling, re-encode into sbcs'
    .argv

input :=
    if argv.encoding is 'sbcs'
        fs.readFileSync argv._.0 ?? 0
            |> decode
    else
        fs.readFileSync argv._.0 ?? 0, { argv.encoding }

output := argv.encode ? encode input : await compile input

fs.writeFileSync argv.outfile ?? 1, output
